# Explanation_of_service_flow.txt

+--------+         +----------------------------+         +------------------------------+                
|        |         |                            |         |                              |                      +------------------------------+        
| 사용자   | ----->  | 웹 애플리케이션 / 클라이언트     | ----->  | meowmung-server-ledger API 서버|        ----->       |             S3                |
|        |         |                            |         |                              |                      +------------------------------+ 
+--------+         +----------------------------+         +------------------------------+                              서버에 S3에 이미지 업로드 
                                                                |                                (이미지를 직접 보내는 것이 아닌 URL을 이용해 이미지를 주고 받는 것이 가능하도록 하기 위함)
                                                                |
                                                                |
                                                                |    서버에서 보낸 S3 이미지 URL을 이용해 이미지 전송                          
                                                                |   
                                                                v
                                                +----------------------------------+
                                                |                                  |
                                                |         MEOWMUNG-LEDGER          |
                                                |                                  |
                                                +----------------------------------+
                                                                |                                              
                                                                |    MEOWMUNG-LEDGER에서 URL을 이용해 이미지 수신 후 Base64로 이미지 인코딩 후 OpenAI API에 전달
                                                                v
                                                +----------------------------------+
                                                |                                  |
                                                |         OpenAI API GPT-4o 모델    |
                                                |                                  |
                                                |                                  |
                                                +----------------------------------+
                                                                |
                                                                |
                                                                |    OpenAI GPT 모델이 Base64 텍스트 데이터를 직접 처리하려면, 
                                                                |    멀티모달 기능(텍스트, 이미지, 오디오 등 다양한 입력 형식을 처리하고 통합적으로 이해하는 기술)을 지원해야 하는데,
                                                                |    이를 지원하는 GPT-4o 모델을 사용해 모델이 Base64 데이터를 디코딩하여 이미지를 복원하고 이를 분석 해 JSON 형식의 결과를 반환하도록 프롬프트 설계.
                                                                |    
                                                                v
                                                +----------------------------------+
                                                |                                  |
                                                |         MEOWMUNG-LEDGER          |   
                                                |                                  |
                                                +----------------------------------+
                                                                |  
                                                                |    만들어진 사용자 영수증 이미지에 대한 JSON 형식의 결과를 서버에 전달 
                                                                v
                                                +----------------------------------+
                                                |                                  |
                                                | meowmung-server-ledger API 서버    |
                                                |                                  |
                                                +----------------------------------+
                                                                |  
                                                                |    사용자 영수증 JSON 형식의 결과를 DB에 저장 
                                                                v
                                                +----------------------------------+
                                                |                                  |
                                                |         MySQL 데이터베이스          |
                                                |                                  |
                                                +----------------------------------+
                                                                |
                                                                v
                                                +----------------------------------+
                                                |                                  |
                                                |        사용자 가계부 데이터 조회       |      조회 시 DB 저장 내역 확인 가능
                                                |                                  |
                                                +----------------------------------+



--------------------------------------------------------------------------------------------------------------------------------------------------------


Docker 이미지 빌드 및 푸시 자동화 workflow  
    : dev 브랜치에 push 시 작동되는 테스트 워크플로우 통과 후 코드 변경 사항을 main 브랜치 merge(push)할 때마다 
      Docker 이미지를 빌드 후 Docker Hub에 푸시하는 과정을 자동화.

+-----------------+          +----------------------+          +-------------------+
|                 |          |                      |          |                   |
| GitHub Actions  | ----->   | Docker 이미지 빌드      | ----->   | Docker Hub 푸시    |
|                 |          |                      |          |                   |
+-----------------+          +----------------------+          +-------------------+
                                                                        |
                                                                        v
                                                        +----------------------------------+
                                                        |                                  |
                                                        |           배포 환경                |
                                                        |                                  |
                                                        +----------------------------------+


--------------------------------------------------------------------------------------------------------------------------------------------------------



## Ledger 기능 흐름 및 개요

    사용자는 웹 애플리케이션을 통해 영수증 이미지를 업로드하며, 이는 서버로 전달됨.
    그리고 영수증 이미지를 전달 받은 서버는 해당 이미지를 S3 URL로 Ledger 기능에 전달함.

    Ledger 기능의 핵심 역할은 이미지 데이터를 영수증 이미지 분석 모델에 보내어, 구조화된 JSON 형태의 재무 정보를 추출하는 것임.

    구현한 Ledger 기능은 다음과 같은 과정을 수행함.

## 서비스의 주요 과정 설명

    1. 이미지 수신
    2. Base64 인코딩
    3. OpenAI GPT-4o 모델 호출
    4. JSON 파싱 및 결과 반환

        우선 서버로부터 사용자가 업로드한 영수증 이미지 파일을 수신.

        수신 받은 이미지 파일을 Base64로 인코딩함.
        이 과정으로 원래 이미지 데이터, 즉 바이너리 데이터가 GPT가 처리할 수 있는 문자열 형태로 변환되어, API 요청에 쉽게 포함될 수 있음.

        인코딩된 이미지를 API로 GPT-4o에 전달.
        GPT-4o 모델을 사용했다는 점이 서비스에서 중요한 부분에 해당하는데, GPT-4o는 멀티모달 AI 모델로서, 텍스트뿐만 아니라 이미지나 오디오와 같은 다양한 형식의 데이터를 이해할 수 있음.
        따라서 기존의 텍스트 전용 모델과 달리, GPT-4o 에 이미지를 전달해 이를 인식하고 분석하게 한 뒤, 원하는 텍스트 결과를 생성할 수 있었음.
        이때 Chat GPT를 웹에서 이용 시 이미지 파일을 바로 전달할 수 있지만,
        OpenAI API를 이용해 이미지를 전달 시 모델이 바이너리 이미지 데이터를 바로 전달받을 수는 없어
        Base64 인코딩을 이용해 바이너리 데이터를 문자열 형태로 바꿔서 전달함
        전달 시, 단순히 이미지만 전달하는 것이 아니라,
        "Base64로 인코딩된 영수증 이미지를 분석하여 필요한 정보를 추출하고 정리해
        어떤 날짜, 어떤 장소에서 무엇을 구매했는지, 총액이 얼마인지 JSON 형식으로 답변을 달라"는 식으로
        필요로 하는 필드와 각 필드의 데이터 타입 및 요구사항을 예시와 함께 매우 구체적인 프롬프트를 함께 전달함.
        이를 통해 모델의 응답 형태를 제어.

        이후 모델의 응답으로부터 JSON 데이터를 추출한 뒤, 이를 다시 서버로 반환함.
        이제 서버는 받은 JSON 데이터를 데이터베이스에 저장하며, 추후 사용자가 필요할 때 조회할 수 있도록 함.

## 개선 시도 

    ### **이미지 전처리 시도 및 한계**

            초기 단계에서는 사용자가 사진을 잘 못찍은 경우를 생각해 사전에 자체적으로 모델이 더 잘 읽을 수 있도록 텍스트 인식 정확도를 높이기 위한 이미지 업스케일링과 대비 조정과 같은 전처리 작업을 고려함.

            따라서 OpenCV의 DNN 모듈과 사전 학습된 EDSR 모델을 사용하여 이미지를 업스케일링하고,
            이진화 처리를 통해 텍스트를 더 명확하게 인식할 수 있도록 대비를 조정함.
            이를 통해 저해상도 이미지를 고해상도로 변환하여 텍스트 인식 정확도를 향상시킬 수 있다는 기대를 가짐.

            그러나 실제 배포를 고려했을 때 몇 가지 실질적인 문제점들이 발견됨.

                1. 이미지 용량 증가:
                업스케일링과 대비 조정으로 이미지 파일 크기가 커져 저장 공간과 데이터 전송 대역폭 소모가 증가함.

                2. 처리 시간 증가:
                고해상도 이미지 처리와 이진화로 인해 서버 응답 시간이 길어지고 성능 저하가 발생함.

                3. 사용자 촬영 환경의 다양성:
                다양한 촬영 환경으로 인해 전처리 효과가 일관되지 않음. 일부 이미지는 개선되지만 모든 이미지에 동일한 효과를 보장하지 못함.

                4. 가성비 문제:
                추가 자원 소모에 비해 인식 정확도 향상 효과가 제한적임. 비용 대비 효율성이 낮아 전체 시스템의 성능과 비용 효율성을 저해함.

        **전처리 작업의 비적용 결정**

            이러한 이유들로 인해, 이미지 업스케일링과 대비 조정과 같은 전처리 작업을 배포 시에는 적용하지 않기로 결정함.

        따라서 사용자가 가능한 한 높은 품질의 이미지를 업로드할 수 있도록 서비스 이용 시 가이드라인을 제공하고, 추후 사용자의 피드백에 맞춰 최적화하는 방향으로 접근.


    ### **이미지를 받아온 후 4o 모델이 처리 후 다시 클라이언트로 보내는 데 까지의 처리 시간**

            이미지 전달 방식 변경: 
            
                RESTful API를 이용한 이미지 주고 받기
                (주고 받는 객체: 이미지) 

                -> 근데 속도가 너무 느려 사용자 입장에서 생각했을 때 개선할 부분이라고 판단 

                    "gRPC API로 주고 받기" 시도 
                        
                        why? 
                        
                        ???????????????????????????????????
                        ???????????????????????????????????
                        ???????????????????????????????????

                        하지만 구현 후 추가적인 공부와 디버깅을 해보면서 우리가 설계한 로직과는 어울리지 않는 통신 방식이라고 판단했음. 
                
                    "RESTful API로 이미지가 아닌 S3의 해당 이미지 URL 주고 받기" 시도
                    (주고 받는 객체: 이미지를 로드할 수 있는 해당 이미지의 S3 URL) 

                        RESTful API를 이용해 이미지 주고 받되, 원래 직접 이미지를 주고 받았다면, 
                        주고 받는 객체를 이미지가 아닌 URL로 한다면 훨씬 서로 간 통신 시 빠르지 않을까?라는 생각을 하게 됨.

                S3를 이용하여 이미지를 URL로 통신함으로써 통신 시 데이터의 용량을 줄임으로써 이전보다 통신 속도를 개선할 수 있었음.

    ### **창의성을 약간 높이니 0.0일 떄의 경우에서 틀린 경우가 보정되는 경우**

                temperature: 0.0 -> 0.2
            0.0으로 설정 후 모델의 결과를 받았을 때, 예를 들어 감자라고 적힌 글이 '검자' 혹은 '금자'로 읽는 사소한 실수가 있었음.
            답변에 모델의 생각을 개입하면 어떻게 될 지 궁금해 다양한 temperature를 설정해 시도해본 결과 temperature를 0.1에서 0.3 정도 구간으로 설정 시 사소한 실수를 최대한 답에 가깝게끔 보정하는 것을 발견할 수 있었음.
             
## CI/CD

추가적으로, 코드 변경 사항의 효율적인 반영을 위해 GitHub Actions를 활용한 Docker 이미지 빌드 및 푸시 자동화 워크플로우를 구현.
메인 브랜치에 코드 변경 사항이 Pull Request 시 안정성을 검증 후 Push될 때마다 Docker 이미지를 자동으로 빌드 & Docker Hub에 푸시함으로써 배포 과정을 자동화함.
코드 변경 시 빠르고 안정적으로 서비스를 업데이트할 수 있게 함.










---------------------------------------------------------------

a. 이미지 처리 및 인코딩

Base64 인코딩: 이미지 데이터를 Base64로 인코딩하여 OpenAI API와의 통신을 원활하게 하는 기능을 성공적으로 구현하였습니다. 이는 API와의 데이터 교환에서 중요한 역할을 합니다.

b. OpenAI GPT-4o 통합

MultiModal 클래스: 이미지 데이터를 처리하고 GPT-4o 모델과 상호작용하여 구조화된 JSON 데이터를 생성하는 핵심 기능을 담당합니다. 프롬프트 설정을 통해 모델의 응답 형식을 제어하는 등 세밀한 조정이 이루어졌습니다.

c. RESTful API 개발

FastAPI 사용: FastAPI를 활용하여 이미지 URL을 받아 처리하고 JSON 형식의 결과를 반환하는 엔드포인트를 구현하였습니다. 이는 사용자에게 직관적이고 효율적인 인터페이스를 제공합니다.
AWS S3 통합: 이미지 URL을 통해 S3에 저장된 이미지를 다운로드하여 처리하는 방식을 구현하였습니다. 이는 데이터 전송 효율성을 높이고, 서버의 부하를 줄이는 데 기여합니다.

d. 도커화
Dockerfile 작성: RESTful API 서버를 위한 Dockerfile을 작성하여 컨테이너화하였습니다. 이는 배포의 일관성과 확장성을 보장합니다.

e. 배포 과정 자동화
GitHub Actions: 메인 브랜치에 코드가 푸시될 때마다 Docker 이미지를 자동으로 빌드하고 Docker Hub에 푸시하는 워크플로우를 설정하였습니다. 이는 배포 과정을 자동화하여 개발 효율성을 크게 향상시킵니다.

f. 배포 준비
k8s를 통해 백앤드 개발자의 서버와 DB에 대한 컨테이너를 감싸는 작업 수행
AWS CLI를 통한 서비스 관리 


